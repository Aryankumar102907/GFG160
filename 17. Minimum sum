//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++
// class Solution {
//   public:
//     string minSum(vector<int>& a) {
//         // Sort the array to ensure smallest numbers come first
//         sort(a.begin(), a.end());

//         // Initialize two strings to represent the numbers
//         string p = "", q = "";
//         for (int i = 0; i < a.size(); i++) {
//             if (i % 2 == 0) {
//                 p += a[i] + '0'; // Append digit to p as a character
//             } else {
//                 q += a[i] + '0'; // Append digit to q as a character
//             }
//         }

//         // Compute the sum of p and q as strings to handle very large numbers
//         string result = "";
//         int carry = 0, i = p.size() - 1, j = q.size() - 1;
//         while (i >= 0 || j >= 0 || carry > 0) {
//             int digit1 = (i >= 0) ? (p[i--] - '0') : 0;
//             int digit2 = (j >= 0) ? (q[j--] - '0') : 0;
//             int sum = digit1 + digit2 + carry;
//             result += (sum % 10) + '0'; // Append the least significant digit
//             carry = sum / 10;           // Update carry
//         }

//         // Reverse the result to get the correct order
//         reverse(result.begin(), result.end());

//         // Remove leading zeroes from the result
//         size_t pos = result.find_first_not_of('0');
//         if (pos != string::npos) {
//             result = result.substr(pos); // Trim leading zeroes
//         } else {
//             result = "0"; // If all digits are zero
//         }

//         return result;
//     }
// };
class Solution {
public:
    string addsum(string s1, string s2) {
        int i = s1.length() - 1;
        int j = s2.length() - 1;
        int carry = 0;
        string res;
        int sum = 0;
        while (i >= 0 || j >= 0 || carry != 0)
        {
            sum = carry;
            
            if (i >= 0)
            {
                sum += s1[i] - '0';
                i--;
            }
            
            if (j >= 0)
            {
                sum += s2[j] - '0';
                j--;
            }
            res.push_back((sum % 10) + '0');
            carry = sum / 10;
        }
        reverse(res.begin(), res.end());
        while (res.length() > 1 && res[0] == '0')
        {
            res.erase(res.begin());
        }
        return res;
    }
    string minSum(vector<int>& arr) {
        sort(arr.begin(), arr.end());
        string s1 = "", s2 = "";
        for (int i = 0; i < arr.size(); i++)
        {
            if (i % 2 == 0)
                s1 += arr[i] + '0';
            else
                s2 += arr[i] + '0';
        }
        return addsum(s1, s2);
    }
};
// class Solution {
//   public:
//     string minSum(vector<int> &a) {
//         // code here;
//         sort(a.begin(), a.end());
//         int p = 0, q = 0;
//         for(int i = 0; i < a.size(); i++)
//         {
//             if(i % 2 == 0)
//             {
//                 p = p * 10 + a[i];
//             }
//             else
//             {
//                 q = q * 10 + a[i];
//             }
//         }
//         return to_string(p + q);
//     }
// };

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> a;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            a.push_back(number);
        }

        Solution ob;
        string ans = ob.minSum(a);
        cout << ans << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
